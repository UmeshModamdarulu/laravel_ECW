version: '3.8'

services:
  # Main application service (Laravel)
  app:
    build:
      context: .
      dockerfile: Dockerfile
    volumes:
      # Mount the local workspace into the container.
      - ../..:/workspaces:cached
    # The default command for the php:apache image starts Apache.
    # No need for 'sleep infinity' here as Apache will keep the container running.
    # command: sleep infinity
    # Ensure the app service is part of our custom network.
    networks:
      - app-network
    ports:
      # Expose port 80 (Apache) inside the container to port 8080 on the host.
      # This is forwarded by devcontainer.json to your local machine.
      - "8080:80"

  # MariaDB database service
  db:
    image: mariadb:10.4
    restart: unless-stopped
    volumes:
      # Persist MariaDB data.
      - mariadb-data:/var/lib/mysql
    environment:
      # Set database credentials. Use strong passwords in production!
      MYSQL_ROOT_PASSWORD: myrootpassword
      MYSQL_DATABASE: laravel_db
      MYSQL_USER: laravel_user
      MYSQL_PASSWORD: laravel_password
    # Ensure the db service is part of our custom network.
    networks:
      - app-network

  # Redis caching and session service
  redis:
    image: redis:latest
    restart: unless-stopped
    # Persist Redis data (optional but good for development).
    volumes:
      - redis-data:/data
    # Ensure the redis service is part of our custom network.
    networks:
      - app-network

  # PhpMyAdmin web interface for MariaDB
  phpmyadmin:
    image: phpmyadmin/phpmyadmin:latest
    restart: unless-stopped
    environment:
      # Configure PhpMyAdmin to connect to the 'db' service.
      PMA_HOST: db
      PMA_PORT: 3306
      MYSQL_ROOT_PASSWORD: myrootpassword # Use the MariaDB root password for PhpMyAdmin login
    ports:
      # Expose PhpMyAdmin UI on port 8000 on the host.
      - "8000:80"
    # Ensure PhpMyAdmin is part of our custom network and depends on the database.
    networks:
      - app-network
    depends_on:
      - db

  # MailHog for local email testing (catches all outgoing emails)
  mailhog:
    image: mailhog/mailhog:latest
    restart: unless-stopped
    ports:
      # Expose MailHog UI on port 8025 and SMTP port on 1025.
      - "8025:8025" # Web UI
      - "1025:1025" # SMTP server
    # Ensure MailHog is part of our custom network.
    networks:
      - app-network

# Define custom network for all services
networks:
  app-network:
    driver: bridge

# Define named volumes for data persistence
volumes:
  mariadb-data:
  redis-data:
